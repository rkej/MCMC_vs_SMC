"0","p <- function(x, alpha = 1.0){"
"0","  return((exp(-(x - 2)^2/2) +"
"0","                       0.5*exp(-(x+2)^2/1) +"
"0","                       0.5*exp(-(x-5)^2/1) + 0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))"
"0","}"
"0",""
"0","# Source code for MCMC"
"0","mcmc <- function(sig, n, x0 = runif(1, -15, 15)){"
"0","  "
"0","  x = rep(0, n)"
"0","  N = length(x0)"
"0","  x[1] = x0"
"0","  u = 0"
"0","  x_star = 0"
"0","  for(i in 2:n){"
"0","    for(j in 1:N){"
"0","      x_star = x[i-1, j] + rnorm(1, 0, sig)}"
"0","    u <- runif(1, -15, 15)"
"0","    if (u < p(x_star)/p(x[i-1]) ){#coin flip to see if we accept"
"0","      x[i] = x_star"
"0","    }"
"0","    else {"
"0","      x[i] = x[i-1]"
"0","    }"
"0","  }"
"0","    return(x)"
"0","}"
"0",""
"0","#Source code for SMC Sampler"
"0","resample_index <- function(p, idx){"
"0","  n = length(p)"
"0","  y = rmultinom(n, size = 1, p)"
"0","  k = 1"
"0","  n_part = 0"
"0","  for(i in 1:n){"
"0","    n_part = y[i]"
"0","    for(j in 1:n_part){"
"0","      idx[k] = i"
"0","      k = k + 1"
"0","    }"
"0","  }"
"0","  return(idx)"
"0","}"
"0",""
"0","reset_weights <- function(X, value, idx){"
"0","  for(i in 1:length(X[idx,])){"
"0","    X[idx, i] = value"
"0","  }"
"0","  return(X)"
"0","}"
"0",""
"0","normalize <- function(x){"
"0","  mx = max(x)"
"0","  z = sum(exp(x - mx))"
"0","  return(log(exp(x - mx)/z))"
"0","}"
"0",""
"0","update_weight <- function(X, value, idx){"
"0","  for(i in 1:length(X[idx,]))"
"0","    X[idx, i] = value"
"0","  return(X)"
"0","}"
"0","ess<- function(w){ return(1/sum(exp(2*w)))}"
"0",""
"0","smc_sampler <- function(del, N, px , sig){"
"0","  xs <- matrix(0, px, N)"
"0","  lw <- matrix(0, px, N)"
"0","  essi <- rep(0, px)"
"0","  n = 1"
"0","  xs[n,] <- rnorm(N, 0, sig)"
"0","  lw[n,] <- normalize(lw[n,])"
"0","  idx = rep(0, N)"
"0","  while (TRUE){"
"0","    essi[n] = ess(lw[n,])"
"0","    if(essi[n] < N*del){"
"0","      idx = resample_idx(exp(lw[n,]), idx)"
"0","      xs[n,] = xs[n,idx]"
"0","      reset_weights(lw, log(1/N), n)"
"0","      "
"0","    }"
"0","    n = n + 1"
"0","    if(n == px + 1){"
"0","      break"
"0","    }"
"0","    xs[n,] = xs[n - 1, ] + array_reshape(rnorm(N, 0, sig), c(1, N))"
"0","    lw[n,] = lw[n-1] + log(p(xs[n,], n/px)) - log(dnorm(xs[n,] - xs[n-1,]))"
"0","    lw[n,] = normalize(lw[n,])"
"0","  }"
"0","  return(xs)"
"0","}"
