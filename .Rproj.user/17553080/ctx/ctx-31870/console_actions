{
    "data" : [
        "Error in julia_eval(\"function write_matrix(f::IOStream, data::Array, exp)\\n  m, n = size(data);\\n  for i in 1:m\\n    write(f, string(exp));\\n    for j in 1:n\\n      write(f, \",  : \n  unused argument (\");\\n      write(f, string(data[i,j]));\\n    end\\n    write(f, '\\n');\\n  end\\nend\")\n",
        "> ",
        "means <- julia_eval(\"function means(x, functions = [g])",
        "+ ",
        "  summaries = zeros(Float64, length(x), length(functions));",
        "+ ",
        "  for (i, fun) in enumerate(functions)",
        "+ ",
        "    summaries[:, i] = fast_means(x, fun);",
        "+ ",
        "  end",
        "+ ",
        "  return(summaries)",
        "+ ",
        "end\", need_return = \"Julia\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "View(means)",
        "Error: Error happens in Julia.\nMethodError: no method matching getindex(::typeof(means), ::Missing)\nStacktrace:\n [1] simple_call(::String, ::Function, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\interface1.jl:11\n [2] simple_call(::String, ::Function, ::Vararg{Any,N} where N) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\interface1.jl:2\n [3] julia_extptr_callback(::Ptr{ListSxp}) at C:\\Users\\iamrk\\.julia\\packages\\RCall\\paaBQ\\src\\callback.jl:56\n",
        "In addition: ",
        "Warning message:\n",
        "In .julia$simple_call_(func, ...) :",
        " NAs introduced by coercion\n",
        "> ",
        "coll_mat <- julia_eval(\"function collapsed_matrix(x, amount = 100)",
        "+ ",
        "  m,n = size(x);",
        "+ ",
        "  d = int(m/amount)",
        "+ ",
        "  collapse = zeros(Float64, d, n);",
        "+ ",
        "  for i = 1:d",
        "+ ",
        "    collapse[i,:] = mean(x[(i-1)*amount + 1: (i)*amount, :], 1)",
        "+ ",
        "  end",
        "+ ",
        "  return collapse",
        "+ ",
        "end\", need_return = \"Julia\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "mcmc<- julia_eval(\"function mcmc(p::Function, x0; sig = 0.6, n = 20000, stype = Float64)",
        "+ ",
        "  #intitialize the sampling. Start somewhere from 0..1",
        "+ ",
        "  x = zeros(Float64, n); # to save our samples",
        "+ ",
        "  N = length(x0);",
        "+ ",
        "  x[1] = x0;",
        "+ ",
        "  u = 0.0;",
        "+ ",
        "  x_star = 0.0;",
        "+ ",
        "  for i = 2:n",
        "+ ",
        "    # sample new state candidate from proposal distribution",
        "+ ",
        "    for j = 1:N",
        "+ ",
        "      x_star = x[i-1, j] + rand(Normal(0.0,sig));",
        "+ ",
        "    end",
        "+ ",
        "    u = rand(); #coin flip",
        "+ ",
        "    # A is simple because our transition probability is symmetric (Metropolis only)",
        "+ ",
        "    if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept",
        "+ ",
        "      x[i] = x_star;",
        "+ ",
        "    else",
        "+ ",
        "      x[i] = x[i-1];",
        "+ ",
        "    end",
        "+ ",
        "  end",
        "+ ",
        "  return x",
        "+ ",
        "end\", need_return=\"Julia\")",
        "> ",
        "",
        "> ",
        "experiment <- julia_eval(\"function perform_experiment(sampler:: Function, iters:: Int64, particles:: Int64, function_list, true_values; seed_offset = 0, col_amount = 100)",
        "+ ",
        "  running_stats = zeros(n, length(function_list));",
        "+ ",
        "  errors = zeros(iters, int(n/col_amount), length(function_list));",
        "+ ",
        "  stable = zeros(iters, length(function_list));",
        "+ ",
        "  for i = 1:iters",
        "+ ",
        "    srand(seed_offset + i);",
        "+ ",
        "    x = sampler(particles);",
        "+ ",
        "    running_stats = means(x, function_list);",
        "+ ",
        "    errors[i, :, :] = collapsed_matrix(abs(broadcast(-, running_stats, true_values')), col_amount);",
        "+ ",
        "    for (j, val) in enumerate(true_values)",
        "+ ",
        "      stable[i, j] = stabalise(running_stats[:,j], val, 0.02)",
        "+ ",
        "    end",
        "+ ",
        "  end",
        "+ ",
        "  return stable, errors",
        "+ ",
        "end\", need_return=\"Julia\")",
        "> ",
        "experiment <- julia_eval(\"function perform_experiment(sampler:: Function, iters:: Int64, particles:: Int64, function_list, true_values; seed_offset = 0, col_amount = 100)",
        "+ ",
        "  running_stats = zeros(n, length(function_list));",
        "+ ",
        "  errors = zeros(iters, int(n/col_amount), length(function_list));",
        "+ ",
        "  stable = zeros(iters, length(function_list));",
        "+ ",
        "  for i = 1:iters",
        "+ ",
        "    srand(seed_offset + i);",
        "+ ",
        "    x = sampler(particles);",
        "+ ",
        "    running_stats = means(x, function_list);",
        "+ ",
        "    errors[i, :, :] = collapsed_matrix(abs(broadcast(-, running_stats, true_values')), col_amount);",
        "+ ",
        "    for (j, val) in enumerate(true_values)",
        "+ ",
        "      stable[i, j] = stabalise(running_stats[:,j], val, 0.02)",
        "+ ",
        "    end",
        "+ ",
        "  end",
        "+ ",
        "  return stable, errors",
        "+ ",
        "end\", need_return=\"R\")",
        "> ",
        "",
        "> ",
        "julia_eval(\"g(x) = x.^2; f(x) = x; function_list = [f, g];\")",
        "Julia Object of type Array{Function,1}.\nFunction[f, g]",
        "> ",
        "julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea65852500>, \n    ...)\n",
        "> ",
        "",
        "> ",
        "julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea65852508>, \n    ...)\n",
        "> ",
        "x, y <- julia_command(\"mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)\")",
        "Error: unexpected ',' in \"x,\"\n",
        "> ",
        "",
        "> ",
        "julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea65852510>, \n    ...)\n",
        "> ",
        "julia_command(\"mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)\")",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea65852518>, \n    ...)\n",
        "> ",
        "julia_eval(\"mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)\")",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea65852520>, \n    ...)\n",
        "> ",
        "julia_call(\"mcmc\", c(p, rand(), n = int(1e6), stype = Float32, sig = 15))",
        "Error in julia$do.call(func_name, list(...), need_return, show_value) : \n  object 'p' not found\n",
        "> ",
        "",
        "> ",
        "julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);\")",
        "> ",
        "julia_call(\"mcmc\", c(p, rand(), n = int(1e6), stype = Float32, sig = 15))",
        "Error in julia$do.call(func_name, list(...), need_return, show_value) : \n  object 'p' not found\n",
        "> ",
        "",
        "> ",
        "julia_command(\"\")",
        "$stdout\nNULL\n\n$out\nNULL\n\nattr(,\"class\")\n[1] \"JuliaOutput\"\n",
        "> ",
        "julia_call(\"mcmc\", c(p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "Error: unexpected '=' in \"julia_call(\"mcmc\", c(p(x, alpha = 1.0) =\"\n",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", c(x, rand(), n = int(1e6), stype = Float32, sig = 15))",
        "Error in rand() : could not find function \"rand\"\n",
        "> ",
        "",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "ran <- julia_eval(\"rand()\")",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "ran <- julia_eval(\"rand()\")",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "ran <- julia_call(\"rand()\")",
        "Error: Error happens in Julia.\nUndefVarError: rand() not defined\nStacktrace:\n [1] funcfind(::String) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:113\n [2] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:167\n",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "ran <- julia_command(\"rand()\")",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "mcmc<- julia_eval(\"function mcmc(p::Function, x0 = rand(); sig = 0.6, n = 20000, stype = Float64)",
        "+ ",
        "  #intitialize the sampling. Start somewhere from 0..1",
        "+ ",
        "  x = zeros(Float64, n); # to save our samples",
        "+ ",
        "  N = length(x0);",
        "+ ",
        "  x[1] = x0;",
        "+ ",
        "  u = 0.0;",
        "+ ",
        "  x_star = 0.0;",
        "+ ",
        "  for i = 2:n",
        "+ ",
        "    # sample new state candidate from proposal distribution",
        "+ ",
        "    for j = 1:N",
        "+ ",
        "      x_star = x[i-1, j] + rand(Normal(0.0,sig));",
        "+ ",
        "    end",
        "+ ",
        "    u = rand(); #coin flip",
        "+ ",
        "    # A is simple because our transition probability is symmetric (Metropolis only)",
        "+ ",
        "    if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept",
        "+ ",
        "      x[i] = x_star;",
        "+ ",
        "    else",
        "+ ",
        "      x[i] = x[i-1];",
        "+ ",
        "    end",
        "+ ",
        "  end",
        "+ ",
        "  return x",
        "+ ",
        "end\", need_return=\"Julia\")",
        "> ",
        "",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "n <- julia_eval(\"int(1e6)\")",
        "Error: Error happens in Julia.\nUndefVarError: int not defined\nStacktrace:\n [1] top-level scope at none:0\n [2] eval(::Module, ::Any) at .\\boot.jl:331\n [3] eval_string(::String) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:195\n [4] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", c(x, n = 1e6, stype = f32, sig = 15))",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::OrderedCollections.OrderedDict{Symbol,Any})\nClosest candidates are:\n  mcmc(!Matched::Function) at none:3\n  mcmc(!Matched::Function, !Matched::Any; sig, n, stype) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", x, n = 1e6, stype = f32, sig = 15)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::OrderedCollections.OrderedDict{Symbol,Any}; n=1.0e6, stype=Float32, sig=15.0)\nClosest candidates are:\n  mcmc(!Matched::Function) at none:3 got unsupported keyword arguments \"n\", \"stype\", \"sig\"\n  mcmc(!Matched::Function, !Matched::Any; sig, n, stype) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "Error: Error happens in Julia.\nMethodError: no method matching getindex(::typeof(means), ::Missing)\nStacktrace:\n [1] simple_call(::String, ::Function, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\interface1.jl:11\n [2] simple_call(::String, ::Function, ::Vararg{Any,N} where N) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\interface1.jl:2\n [3] julia_extptr_callback(::Ptr{ListSxp}) at C:\\Users\\iamrk\\.julia\\packages\\RCall\\paaBQ\\src\\callback.jl:56\n",
        "In addition: ",
        "Warning message:\n",
        "In .julia$simple_call_(func, ...) :",
        " NAs introduced by coercion\n",
        "> ",
        "julia_eval(\"function mcmc(p::Function, x0 = rand(); sig = 0.6, n = 20000, stype = Float64)",
        "+ ",
        "  #intitialize the sampling. Start somewhere from 0..1",
        "+ ",
        "  x = zeros(Float64, n); # to save our samples",
        "+ ",
        "  N = length(x0);",
        "+ ",
        "  x[1] = x0;",
        "+ ",
        "  u = 0.0;",
        "+ ",
        "  x_star = 0.0;",
        "+ ",
        "  for i = 2:n",
        "+ ",
        "    # sample new state candidate from proposal distribution",
        "+ ",
        "    for j = 1:N",
        "+ ",
        "      x_star = x[i-1, j] + rand(Normal(0.0,sig));",
        "+ ",
        "    end",
        "+ ",
        "    u = rand(); #coin flip",
        "+ ",
        "    # A is simple because our transition probability is symmetric (Metropolis only)",
        "+ ",
        "    if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept",
        "+ ",
        "      x[i] = x_star;",
        "+ ",
        "    else",
        "+ ",
        "      x[i] = x[i-1];",
        "+ ",
        "    end",
        "+ ",
        "  end",
        "+ ",
        "  return x",
        "+ ",
        "end\", need_return=\"Julia\")",
        "Julia Object of type typeof(mcmc).\nmcmc",
        "> ",
        "",
        "> ",
        "x <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", x, n = 1e6, stype = f32, sig = 15)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::OrderedCollections.OrderedDict{Symbol,Any}; n=1.0e6, stype=Float32, sig=15.0)\nClosest candidates are:\n  mcmc(!Matched::Function) at none:3 got unsupported keyword arguments \"n\", \"stype\", \"sig\"\n  mcmc(!Matched::Function, !Matched::Any; sig, n, stype) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "> ",
        "julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "$stdout\nNULL\n\n$out\n[1] \"p (generic function with 2 methods)\"\n\nattr(,\"class\")\n[1] \"JuliaOutput\"\n",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = 1e6, stype = f32, sig = 15)",
        "Error in julia$do.call(func_name, list(...), need_return, show_value) : \n  object 'p' not found\n",
        "> ",
        "",
        "> ",
        "p <- julia_command(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = 1e6, stype = f32, sig = 15)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::OrderedCollections.OrderedDict{Symbol,Any}; n=1.0e6, stype=Float32, sig=15.0)\nClosest candidates are:\n  mcmc(!Matched::Function) at none:3 got unsupported keyword arguments \"n\", \"stype\", \"sig\"\n  mcmc(!Matched::Function, !Matched::Any; sig, n, stype) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = 1e6, stype = f32, sig = 15)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = 1e6, sig = 15)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = int(1e6), sig = 15)",
        "Error in int(1e+06) : could not find function \"int\"\n",
        "> ",
        "",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "f32 <- julia_eval(\"Float32\")",
        "> ",
        "julia_call(\"mcmc\", p, n = 1e6, sig = 15)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "p",
        "function (...) \n.External(<pointer: 0x000001ea4f032fa0>, <pointer: 0x000001ea658525f0>, \n    ...)\n",
        "> ",
        "",
        "> ",
        "rand()",
        "Error in rand() : could not find function \"rand\"\n",
        "> ",
        "library(lmerTest)",
        "Error in library(lmerTest) : there is no package called ‘lmerTest’\n",
        "> ",
        "install.packages(\"lmerTest\")",
        "Installing package into ‘C:/Users/iamrk/Documents/R/win-library/3.6’\n(as ‘lib’ is unspecified)\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/lmerTest_3.1-2.zip'\n",
        "Content type 'application/zip'",
        " length 417880 bytes (408 KB)\n",
        "downloaded 408 KB\n\n",
        "package ‘lmerTest’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\iamrk\\AppData\\Local\\Temp\\RtmpcnF66o\\downloaded_packages\n",
        "> ",
        "rand()",
        "Error in rand() : could not find function \"rand\"\n",
        "> ",
        "lmerTest::rand()",
        "Error in inherits(model, \"lmerMod\") : \n  argument \"model\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        ";",
        "Error: unexpected ';' in \";\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2).^2/2) +",
        "Error: unexpected symbol in:\n\"p <- function(x, alpha = 1.0){\n  return((exp(-(x - 2).\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64)\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50, numeric)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64, ::RCall.var\"#11#12\"{RObject{ClosSxp}})\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50, numeric())",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64, ::Array{Float64,1})\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "f64 <- julia_eval(\"Float64\")",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50, f64)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64, ::Type{Float64})\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "f64 <- julia_eval(\"Float64\")",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64)\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:3\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- function(x, alpha = 1.0){",
        "+ ",
        "  return((exp(-(x - 2)^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5)^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))",
        "+ ",
        "}",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64)\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:3\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "library(lmerTest)",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "stype <- julia_eval(\"stype=Float64\")",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50, stype)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64, ::Type{Float64})\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_call(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "Error: Error happens in Julia.\nUndefVarError: p(x, alpha = 1 not defined\nStacktrace:\n [1] funcfind(::String) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:113\n [2] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:167\n",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "stype <- julia_eval(\"stype=Float64\")",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1), 15, 50, stype)",
        "Error: Error happens in Julia.\nMethodError: no method matching mcmc(::RCall.var\"#11#12\"{RObject{ClosSxp}}, ::Float64, ::Float64, ::Float64, ::Type{Float64})\nClosest candidates are:\n  mcmc(::Function, ::Any; sig, n, stype) at C:\\Users\\iamrk\\Documents\\uni\\stat 440\\Final_Project\\MCMC.jl:4\n  mcmc(::Function) at none:3\nStacktrace:\n [1] docall(::Ptr{Nothing}) at C:\\Users\\iamrk\\Documents\\R\\win-library\\3.6\\JuliaCall\\julia\\setup.jl:168\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "stype <- julia_eval(\"stype=Float64\")",
        "> ",
        "julia_call(\"mcmc\", p, runif(1, 0,1); 15, 50, stype)",
        "Error: unexpected ';' in \"julia_call(\"mcmc\", p, runif(1, 0,1);\"\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "> ",
        "julia_source(\"MCMC.jl\")",
        "> ",
        "p <- julia_eval(\"p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +",
        "+ ",
        "                       0.5*exp(-(x+2).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-5).^2/1) +",
        "+ ",
        "                       0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)\")",
        "> ",
        "julia_call(\"mcmc\", 15, 50)",
        "Error: Error happens in Julia.\ncould not load library \"libdSFMT\"\nThe specified module could not be found. \nStacktrace:\n [1] dsfmt_init_by_array at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\DSFMT.jl:70 [inlined]\n [2] seed!(::Random.MersenneTwister, ::Array{UInt32,1}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:282\n [3] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:289 [inlined]\n [4] seed! at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\Random.jl:426 [inlined]\n [5] Random.MersenneTwister(::Nothing) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:138 (repeats 2 times)\n [6] default_rng(::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.jl:303\n [7] default_rng at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.4\\Random\\src\\RNGs.j\n",
        "> ",
        "",
        "\n",
        "> ",
        "library(XRJulia)",
        "> ",
        "library(JuliaCall)",
        "> ",
        "julia_setup(JULIA_HOME = \"C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/\")",
        "> ",
        "",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ]
}