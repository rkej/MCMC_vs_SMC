library(JuliaCall)
findJulia("C:\Users\NAME\AppData\Local\Julia-1.0.1\bin\julia.exe")
library(JuliaCall)
findJulia(test = TRUE)
library(XRJulia)
findJulia(test = TRUE)
library(XRJulia)
findJulia()
library(XRJulia)
findJulia()
library(XRJulia)
findJulia()
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin"))
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:\Users\iamrk\AppData\Local\Programs\Julia\Julia-1.4.1\bin")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="~\AppData\Local\Programs\Julia\Julia-1.4.1\bin")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin")
findJulia(test = TRUE)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_BIN="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1")
findJulia(test = TRUE)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1")
findJulia(test = TRUE)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1")
findJulia(test = TRUE)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1")
findJulia()
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME="C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1")
findJulia(JULIA_BIN = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin")
library(XRJulia)
library(JuliaCall)
julia_setup()
findJulia(test = T)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin")
findJulia(test = T)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:\Users\iamrk\AppData\Local\Programs\Julia\Julia-1.4.1\bin\julia.exe")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/julia.exe")
findJulia(test = T)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/julia.exe")
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/")
findJulia(test = T)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/")
julpacks = julia_eval("using Distributions: Normal, Uniform, pdf, Multinomial, Binomial, MvNormal")
julpacks = julia_eval("using Distributions: Normal, Uniform, pdf, Multinomial, Binomial, MvNormal")
wrt_mat <- julia_eval("function write_matrix(f::IOStream, data::Array, exp)
m, n = size(data);
for i in 1:m
write(f, string(exp));
for j in 1:n
write(f, ", ");
write(f, string(data[i,j]));
end
write(f, '\n');
end
end")
wrt_mat <- julia_eval("function write_matrix(f::IOStream, data::Array, exp)
m, n = size(data);
for i in 1:m
write(f, string(exp));
for j in 1:n
write(f, ", ");
write(f, string(data[i,j]));
end
write(f, '\n');
end
end", need_return="Julia")
means <- julia_eval("function means(x, functions = [g])
summaries = zeros(Float64, length(x), length(functions));
for (i, fun) in enumerate(functions)
summaries[:, i] = fast_means(x, fun);
end
return(summaries)
end", need_return = "Julia")
View(means)
coll_mat <- julia_eval("function collapsed_matrix(x, amount = 100)
m,n = size(x);
d = int(m/amount)
collapse = zeros(Float64, d, n);
for i = 1:d
collapse[i,:] = mean(x[(i-1)*amount + 1: (i)*amount, :], 1)
end
return collapse
end", need_return = "Julia")
mcmc<- julia_eval("function mcmc(p::Function, x0; sig = 0.6, n = 20000, stype = Float64)
#intitialize the sampling. Start somewhere from 0..1
x = zeros(Float64, n); # to save our samples
N = length(x0);
x[1] = x0;
u = 0.0;
x_star = 0.0;
for i = 2:n
# sample new state candidate from proposal distribution
for j = 1:N
x_star = x[i-1, j] + rand(Normal(0.0,sig));
end
u = rand(); #coin flip
# A is simple because our transition probability is symmetric (Metropolis only)
if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept
x[i] = x_star;
else
x[i] = x[i-1];
end
end
return x
end", need_return="Julia")
experiment <- julia_eval("function perform_experiment(sampler:: Function, iters:: Int64, particles:: Int64, function_list, true_values; seed_offset = 0, col_amount = 100)
running_stats = zeros(n, length(function_list));
errors = zeros(iters, int(n/col_amount), length(function_list));
stable = zeros(iters, length(function_list));
for i = 1:iters
srand(seed_offset + i);
x = sampler(particles);
running_stats = means(x, function_list);
errors[i, :, :] = collapsed_matrix(abs(broadcast(-, running_stats, true_values')), col_amount);
for (j, val) in enumerate(true_values)
stable[i, j] = stabalise(running_stats[:,j], val, 0.02)
end
end
return stable, errors
end", need_return="Julia")
experiment <- julia_eval("function perform_experiment(sampler:: Function, iters:: Int64, particles:: Int64, function_list, true_values; seed_offset = 0, col_amount = 100)
running_stats = zeros(n, length(function_list));
errors = zeros(iters, int(n/col_amount), length(function_list));
stable = zeros(iters, length(function_list));
for i = 1:iters
srand(seed_offset + i);
x = sampler(particles);
running_stats = means(x, function_list);
errors[i, :, :] = collapsed_matrix(abs(broadcast(-, running_stats, true_values')), col_amount);
for (j, val) in enumerate(true_values)
stable[i, j] = stabalise(running_stats[:,j], val, 0.02)
end
end
return stable, errors
end", need_return="R")
julia_eval("g(x) = x.^2; f(x) = x; function_list = [f, g];")
julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
x, y <- julia_command("mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)")
julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
julia_command("mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)")
julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
julia_eval("mcmc(p, rand(), n = int(1e6), stype = Float32, sig = 15)")
julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
julia_call("mcmc", c(p, rand(), n = int(1e6), stype = Float32, sig = 15))
julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha);")
julia_call("mcmc", c(p, rand(), n = int(1e6), stype = Float32, sig = 15))
julia_command("")
julia_call("mcmc", c(p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", c(x, rand(), n = int(1e6), stype = Float32, sig = 15))
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
ran <- julia_eval("rand()")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
ran <- julia_eval("rand()")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
ran <- julia_call("rand()")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
ran <- julia_command("rand()")
mcmc<- julia_eval("function mcmc(p::Function, x0 = rand(); sig = 0.6, n = 20000, stype = Float64)
#intitialize the sampling. Start somewhere from 0..1
x = zeros(Float64, n); # to save our samples
N = length(x0);
x[1] = x0;
u = 0.0;
x_star = 0.0;
for i = 2:n
# sample new state candidate from proposal distribution
for j = 1:N
x_star = x[i-1, j] + rand(Normal(0.0,sig));
end
u = rand(); #coin flip
# A is simple because our transition probability is symmetric (Metropolis only)
if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept
x[i] = x_star;
else
x[i] = x[i-1];
end
end
return x
end", need_return="Julia")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
n <- julia_eval("int(1e6)")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", c(x, n = 1e6, stype = f32, sig = 15))
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", x, n = 1e6, stype = f32, sig = 15)
julia_eval("function mcmc(p::Function, x0 = rand(); sig = 0.6, n = 20000, stype = Float64)
#intitialize the sampling. Start somewhere from 0..1
x = zeros(Float64, n); # to save our samples
N = length(x0);
x[1] = x0;
u = 0.0;
x_star = 0.0;
for i = 2:n
# sample new state candidate from proposal distribution
for j = 1:N
x_star = x[i-1, j] + rand(Normal(0.0,sig));
end
u = rand(); #coin flip
# A is simple because our transition probability is symmetric (Metropolis only)
if u < p(x_star)/p(x[i-1]) #coin flip to see if we accept
x[i] = x_star;
else
x[i] = x[i-1];
end
end
return x
end", need_return="Julia")
x <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", x, n = 1e6, stype = f32, sig = 15)
julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, stype = f32, sig = 15)
p <- julia_command("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, stype = f32, sig = 15)
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, stype = f32, sig = 15)
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, sig = 15)
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = int(1e6), sig = 15)
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, sig = 15)
julia_source("MCMC.jl")
julia_source("MCMC.jl")
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
p
rand()
library(lmerTest)
install.packages("lmerTest")
rand()
lmerTest::rand()
;
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2).^2/2) +
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
julia_call("mcmc", p, runif(1, 0,1), 15, 50)
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
julia_call("mcmc", p, runif(1, 0,1), 15, 50, numeric)
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
julia_call("mcmc", p, runif(1, 0,1), 15, 50, numeric())
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
f64 <- julia_eval("Float64")
julia_call("mcmc", p, runif(1, 0,1), 15, 50, f64)
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
f64 <- julia_eval("Float64")
julia_call("mcmc", p, runif(1, 0,1), 15, 50)
library(lmerTest)
julia_source("MCMC.jl")
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) +
0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
julia_call("mcmc", p, runif(1, 0,1), 15, 50)
library(lmerTest)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
}
library(lmerTest)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
}
library(lmerTest)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
}
library(lmerTest)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
}
library(lmerTest)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
}
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
stype <- julia_eval("stype=Float64")
julia_call("mcmc", p, runif(1, 0,1), 15, 50, stype)
julia_source("MCMC.jl")
p <- julia_call("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
stype <- julia_eval("stype=Float64")
julia_call("mcmc", p, runif(1, 0,1), 15, 50, stype)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
stype <- julia_eval("stype=Float64")
julia_call("mcmc", p, runif(1, 0,1); 15, 50, stype)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/")
