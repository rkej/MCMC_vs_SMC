---
title: "R Notebook"
output: html_notebook
---

```{r}
library(reticulate)
```

```{r}
julpacks = julia_eval("using Distributions: Normal, Uniform, pdf, Multinomial, Binomial, MvNormal")

```

```{r}
p <- function(x, alpha = 1.0){
  return((exp(-(x - 2)^2/2) +
                       0.5*exp(-(x+2)^2/1) +
                       0.5*exp(-(x-5)^2/1) + 0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}


# Source code for MCMC in R
mcmc <- function(sig, n, x0 = runif(1, -15, 15)){
  
  x = rep(0, n)
  N = length(x0)
  x[1] = x0
  u = 0
  x_star = 0
  for(i in 2:n){
    for(j in 1:N){
      x_star = x[i-1, j] + rnorm(1, 0, sig)}
    u <- runif(1, -15, 15)
    if (u < p(x_star)/p(x[i-1]) ){#coin flip to see if we accept
      x[i] = x_star
    }
    else {
      x[i] = x[i-1]
    }
  }
    return(x)
}

#Source code for SMC Sampler in R
resample_index <- function(p, idx){
  n = length(p)
  y = rmultinom(n, size = 1, p)
  k = 1
  n_part = 0
  for(i in 1:n){
    n_part = y[i]
    for(j in 1:n_part){
      idx[k] = i
      k = k + 1
    }
  }
  return(idx)
}

reset_weights <- function(X, value, idx){
  for(i in 1:length(X[idx,])){
    X[idx, i] = value
  }
  return(X)
}

normalize <- function(x){
  mx = max(x)
  z = sum(exp(x - mx))
  return(log(exp(x - mx)/z))
}

update_weight <- function(X, value, idx){
  for(i in 1:length(X[idx,]))
    X[idx, i] = value
  return(X)
}
ess<- function(w){ return(1/sum(exp(2*w)))}

smc_sampler <- function(del, N, px , sig){
  xs <- matrix(0, px, N)
  lw <- matrix(0, px, N)
  essi <- rep(0, px)
  n = 1
  xs[n,] <- rnorm(N, 0, sig)
  lw[n,] <- normalize(lw[n,])
  idx = rep(0, N)
  while (TRUE){
    essi[n] = ess(lw[n,])
    if(essi[n] < N*del){
      idx = resample_idx(exp(lw[n,]), idx)
      xs[n,] = xs[n,idx]
      reset_weights(lw, log(1/N), n)
      
    }
    n = n + 1
    if(n == px + 1){
      break
    }
    xs[n,] = xs[n - 1, ] + array_reshape(rnorm(N, 0, sig), c(1, N))
    lw[n,] = lw[n-1] + log(p(xs[n,], n/px)) - log(dnorm(xs[n,] - xs[n-1,]))
    lw[n,] = normalize(lw[n,])
  }
  return(xs)
}
```

#### The graphs below are generated by Julia code using PyPlot and other statistical packages. I jave coded MCMC and SMC by hand above in R, while I have coded MCMC and SMC in `MCMC.jl` and `SMC.jl` respectively since Julia is better for benchmark comparison. Below are some of the plots generated from the file `experiments-basic.jl`. Please use the command `julia experiments-basic.jl` to execute the code and generate graphs. Here are a few of the graphs I generated:

### Mean absolute error of the means obtained by MCMC and SMC. 
![](Means)


### Mean absolute error of the squared of means obtained by MCMC and SMC. 
![](MeanSquared.png)
### Convergence cmoparison between E[x] values by MCMC and SMC. 

![](Convergence.png)


```{r}

```