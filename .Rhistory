library(XRJulia)
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/iamrk/AppData/Local/Programs/Julia/Julia-1.4.1/bin/")
julpacks = julia_eval("using Distributions: Normal, Uniform, pdf, Multinomial, Binomial, MvNormal")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
f32 <- julia_eval("Float32")
julia_call("mcmc", p, n = 1e6, sig = 15)
julia_source("MCMC.jl")
p <- julia_eval("p(x, alpha = 1.0) = (exp(-(x - 2).^2/2) +
0.5*exp(-(x+2).^2/1) +
0.5*exp(-(x-5).^2/1) +
0.5*exp(-(x-15).^2/1)).^(alpha).*exp(-(x).^2/2).^(1-alpha)")
julia_call("mcmc", 15, 50)
rorm(0, 15)
rnorm(0, 15)
rnorm(0, 15)
rnorm(1, 0, 15)
rand(1)
rand(1, 1)
runif(1, -15, 15)
runif(1, -15, 15)
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) + 0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
mcmc <- function(sig, n, x0){
x = rep(0, n)
N = length(x0)
x[1] = x0
u = 0
x_star - 0
for(i in 2:n){
for j in 1:N
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) + 0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
mcmc <- function(sig, n, x0){
x = rep(0, n)
N = length(x0)
x[1] = x0
u = 0
x_star - 0
for(i in 2:n){
for(j in 1:N){
x_star = x[i-1, j] + rnorm(1, 0, sig)}
u <- runif(1, -15, 15)
if (u < p(x_star)/p(x[i-1]) ){#coin flip to see if we accept
x[i] = x_star
}
else {
x[i] = x[i-1]
}
}
return(x)
}
}
p <- function(x, alpha = 1.0){
return((exp(-(x - 2)^2/2) +
0.5*exp(-(x+2)^2/1) +
0.5*exp(-(x-5)^2/1) + 0.5*exp(-(x-15)^2/1))^(alpha)*exp(-(x)^2/2)^(1-alpha))
}
mcmc <- function(sig, n, x0){
x = rep(0, n)
N = length(x0)
x[1] = x0
u = 0
x_star - 0
for(i in 2:n){
for(j in 1:N){
x_star = x[i-1, j] + rnorm(1, 0, sig)}
u <- runif(1, -15, 15)
if (u < p(x_star)/p(x[i-1]) ){#coin flip to see if we accept
x[i] = x_star
}
else {
x[i] = x[i-1]
}
}
return(x)
}
